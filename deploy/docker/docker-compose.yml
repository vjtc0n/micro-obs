version: '3.3'
services:
  jaeger:
    container_name: micro-obs-jaeger
    image: jaegertracing/all-in-one:1.8
    ports:
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '16686:16686'
    restart: always

  prometheus:
    container_name: micro-obs-prometheus
    image: prom/prometheus:v2.5.0
    ports:
      - '9090:9090'
    volumes:
      - './conf/prometheus.yml:/etc/prometheus/prometheus.yml:ro'
    restart: always

  grafana:
    container_name: micro-obs-grafana
    image: grafana/grafana:5.4.2
    ports:
      - '3000:3000'
    volumes:
      - './data/grafana:/var/lib/grafana'
    restart: always

  elasticsearch:
    container_name: micro-obs-elasticsearch
    image: elastic/elasticsearch:6.5.4
    restart: always
    environment:
      ES_JAVA_OPTS: '-Xmx256m -Xms256m'
      xpack.security.enabled: 'false'
      xpack.watcher.enabled: 'false'
      xpack.graph.enabled: 'false'
      xpack.monitoring.enabled: 'false'

  logstash:
    container_name: micro-obs-logstash
    image: elastic/logstash:6.5.4
    ports:
      - '5000:5000'
    volumes:
      - './conf/logstash.yml:/usr/share/logstash/config/logstash.yml:ro'
      - './conf/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro'
    environment:
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
    depends_on:
      - elasticsearch
    restart: always

  kibana:
    container_name: micro-obs-kibana
    image: elastic/kibana:6.5.4
    ports:
      - '5601:5601'
    volumes:
      - './conf/kibana.yml:/usr/share/kibana/kibana.yml:ro'
    depends_on:
      - elasticsearch
    restart: always

  redis-item:
    container_name: micro-obs-redis
    image: redis:5
    ports:
      - '6379:6379'
    restart: always

  # item:
  #   container_name: micro-obs-item
  #   image: golang:1.11
  #   command: go run main.go root.go runserver.go -r redis://redis-item:6379/0
  #   volumes:
  #     - '../../.:/micro-obs'
  #   working_dir: '/micro-obs/cmd/item/'
  #   ports:
  #     - '8080:8080'
  #   environment:
  #     - 'JAEGER_AGENT_HOST=jaeger'
  #     - 'JAEGER_AGENT_PORT=6831'
  #     - 'GOOS=linux'
  #     - 'GOARCH=amd64'
  #     - 'CGO_ENABLED=0'
  #   logging:
  #     driver: syslog
  #     options:
  #       syslog-address: 'tcp://127.0.0.1:5000'
  #       syslog-facility: daemon
  #       syslog-format: rfc5424
  #   depends_on:
  #     - redis-item
  #     - logstash
  #   restart: always

  redis-order:
    container_name: micro-obs-redis-order
    image: redis:5
    command: redis-server --port 6380
    ports:
      - '6380:6380'
    restart: always

  order:
    container_name: micro-obs-order
    image: obitech/micro-obs:master
    command: order -r redis://redis-order:6380/0 -i http://item:8080
    ports:
      - '8090:8090'
    environment:
      - 'JAEGER_AGENT_HOST=jaeger'
      - 'JAEGER_AGENT_PORT=6831'
    logging:
      driver: syslog
      options:
        syslog-address: 'tcp://127.0.0.1:5000'
        syslog-facility: daemon
        syslog-format: rfc5424
    depends_on:
      - redis-order
      - logstash
    restart: always

  redis-exporter:
    container_name: micro-obs-redis-exporter
    image: oliver006/redis_exporter:v0.24.0
    command: --redis.addr=redis://redis-order:6380/0,redis://redis-item:6379/0
    depends_on:
      - redis-item
      - redis-order
    restart: always

  postgres:
    image: postgres:9.3
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      POSTGRES_DB: otoy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: runwols123
    ports:
      - 5432:5432

  kafka:
    image: wurstmeister/kafka:0.10.2.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_CREATE_TOPICS: 'message:3:1'
      # KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
      HOSTNAME_COMMAND: "ifconfig eth0 | grep 'inet addr' | awk '{ print $$2}' | awk -F: '{print $$2}'"
      KAFKA_ADVERTISED_PORT: '9092'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_MESSAGE_MAX_BYTES: 200000000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181

  consul:
    image: consul
    ports:
      - 8500:8500
  # workers:
  #   image: golang:latest
  #   volumes:
  #     - '../../.:/go/src/github.com/micro-obs'
  #   working_dir: '/go/src/github.com/micro-obs/quizes'
  #   command: go run main.go --act=consumer
  #   environment:
  #     GO111MODULE: 'on'
  #   restart: on-failure
  #   depends_on:
  #     - postgres
  #     - zookeeper
  #     - kafka
  #     - consul
  #   links:
  #     - postgres
  #     - zookeeper
  #     - kafka
  #     - consul
  # migrate:
  #   image: golang:latest
  #   volumes:
  #     - '../../.:/go/src/github.com/micro-obs'
  #   working_dir: '/go/src/github.com/micro-obs/quizes'
  #   command: go run main.go --act=migrate
  #   environment:
  #     GO111MODULE: 'on'
  #   restart: on-failure
  #   depends_on:
  #     - postgres
  #     - zookeeper
  #     - kafka
  #     - consul
  #   links:
  #     - postgres
  #     - zookeeper
  #     - kafka
  #     - consul
  # quizes:
  #   image: golang:latest
  #   volumes:
  #     - '../../.:/go/src/github.com/micro-obs'
  #   working_dir: '/go/src/github.com/micro-obs/quizes'
  #   command: go run main.go
  #   environment:
  #     GO111MODULE: 'on'
  #   restart: on-failure
  #   depends_on:
  #     - postgres
  #     - zookeeper
  #     - kafka
  #     - consul
  #     - workers
  #   links:
  #     - postgres
  #     - zookeeper
  #     - kafka
  #     - consul
  #   ports:
  #     - 8080:8080
